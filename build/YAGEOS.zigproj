<?xml version="1.0" encoding="utf-8"?>
<Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <ItemGroup Label="ProjectConfigurations">
    <ProjectConfiguration Include="Debug-Freestanding|ARM">
      <Configuration>Debug-Freestanding</Configuration>
      <Platform>ARM</Platform>
      <DebugSymbols>true</DebugSymbols>
    </ProjectConfiguration>
    <ProjectConfiguration Include="Debug-Freestanding|x64">
      <Configuration>Debug-Freestanding</Configuration>
      <Platform>x64</Platform>
      <DebugSymbols>true</DebugSymbols>
    </ProjectConfiguration>
    <ProjectConfiguration Include="Debug|ARM">
      <Configuration>Debug</Configuration>
      <Platform>ARM</Platform>
      <DebugSymbols>true</DebugSymbols>
    </ProjectConfiguration>
    <ProjectConfiguration Include="Debug|x64">
      <Configuration>Debug</Configuration>
      <Platform>x64</Platform>
      <DebugSymbols>true</DebugSymbols>
    </ProjectConfiguration>
    <ProjectConfiguration Include="Release-Freestanding|ARM">
      <Configuration>Release-Freestanding</Configuration>
      <Platform>ARM</Platform>
      <DebugSymbols>false</DebugSymbols>
    </ProjectConfiguration>
    <ProjectConfiguration Include="Release-Freestanding|x64">
      <Configuration>Release-Freestanding</Configuration>
      <Platform>x64</Platform>
      <DebugSymbols>false</DebugSymbols>
    </ProjectConfiguration>
    <ProjectConfiguration Include="Release|ARM">
      <Configuration>Release</Configuration>
      <Platform>ARM</Platform>
      <DebugSymbols>false</DebugSymbols>
    </ProjectConfiguration>
    <ProjectConfiguration Include="Release|x64">
      <Configuration>Release</Configuration>
      <Platform>x64</Platform>
      <DebugSymbols>false</DebugSymbols>
    </ProjectConfiguration>
  </ItemGroup>
  <PropertyGroup>
    <!-- a Name Property will be added when project is created by DevEnv.-->
    <Name>YAGEOS</Name>
    <RootNamespace>YAGEOS</RootNamespace>
  </PropertyGroup>
  <PropertyGroup Label="Globals">
    <BaseItemPath>..\src\YAGEOS</BaseItemPath>
  </PropertyGroup>
  <PropertyGroup>
    <!-- this needs to be before Microsoft.Cpp.props-->
    <!-- <OSType>Windows</OSType>-->
    <OSType>Windows</OSType>
    <ConfigurationType>Application</ConfigurationType>
    <!-- this will be changed by Project Property Page -->
    <OutputType>
    </OutputType>
    <!-- Microsoft.VisualStudio.Project needs OutputType to Debug-->
  </PropertyGroup>
  <!-- Create required Propaties from OSType -->
  <PropertyGroup Condition="'$(OSType)' == 'Windows'">
    <ApplicationType>Windows</ApplicationType>
  </PropertyGroup>
  <PropertyGroup Condition="'$(OSType)' == 'Linux'">
    <ApplicationType>linux</ApplicationType>
    <TargetLinuxPlatform>linux</TargetLinuxPlatform>
    <ApplicationTypeRevision>1.0</ApplicationTypeRevision>
    <PlatformToolset>WSL2_1_0</PlatformToolset>
    <Keyword>Linux</Keyword>
    <LinuxProjectType>{D51BCBC9-82E9-4017-911E-C93873C4EA2B}</LinuxProjectType>
  </PropertyGroup>
  <PropertyGroup Condition="'$(OSType)' == 'RaspberryPiOS'">
    <ApplicationType>linux</ApplicationType>
    <TargetLinuxPlatform>Raspberry</TargetLinuxPlatform>
    <ApplicationTypeRevision>1.0</ApplicationTypeRevision>
    <PlatformToolset>
    </PlatformToolset>
  </PropertyGroup>
  <PropertyGroup Condition="'$(OSType)' == 'Android'">
    <ApplicationType>Android</ApplicationType>
    <ApplicationTypeRevision>3.0</ApplicationTypeRevision>
    <PlatformToolset>
    </PlatformToolset>
  </PropertyGroup>
  <PropertyGroup Condition="'$(OSType)' == 'iOS'">
    <ApplicationType>iOS</ApplicationType>
  </PropertyGroup>
  <PropertyGroup Condition="'$(OSType)' == 'macOS'">
    <ApplicationType>windows</ApplicationType>
    <!-- Microsoft.Cpp.props does not support macos-->
  </PropertyGroup>
  <PropertyGroup Condition="'$(OSType)' == 'Freestanding'">
    <ApplicationType>Freestanding</ApplicationType>
    <!-- Microsoft.Cpp.props does not support macos-->
  </PropertyGroup>
  <!-- Read https://learn.microsoft.com/en-us/visualstudio/extensibility/visual-cpp-project-extensibility?view=vs-2022 -->
  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.Default.props" />
  <!-- Read https://learn.microsoft.com/en-us/visualstudio/extensibility/visual-cpp-project-extensibility?view=vs-2022 -->
  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.props" />
  <PropertyGroup>
    <!-- if the configuration is unknown , set default -->
    <Platform Condition="'$(Platform)' == '' or '$(Platform)' == 'Win32' ">x64</Platform>
    <Configuration Condition="'$(Configuration)' == '' ">Debug-Freestanding</Configuration>
  </PropertyGroup>
  <PropertyGroup>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>058d912d-0f99-430b-b7c7-99aca27fc2a1</ProjectGuid>
  </PropertyGroup>
  <PropertyGroup>
    <!-- These properties will be overrided by the project property page-->
    <ToolName>zig.exe</ToolName>
    <RootSourceName>..\src\YAGEOS\main.zig</RootSourceName>
    <AssemblyName>$(ProjectName)</AssemblyName>
    <AssemblyVersion>0.0.1</AssemblyVersion>
    <BuildOption>
    </BuildOption>
    <UseBuildDotZig>true</UseBuildDotZig>
    <IncludeDirs>..\YAGECore\Include\;..\src\YAGEOS\</IncludeDirs>
    <LibraryDirs>$(SolutionDir)..\bin\$(Platform)\$(Configuration)</LibraryDirs>
    <Libraries>
    </Libraries>
    <Dependencies>
    </Dependencies>
    <Modules>
    </Modules>
    <IntDirName>obj</IntDirName>
    <OutDirName>bin</OutDirName>
    <GenerateBuildDotZig>false</GenerateBuildDotZig>
    <GenerateBuildDotZigDotZon>false</GenerateBuildDotZigDotZon>
    <WorkingDirectory>
    </WorkingDirectory>
    <StartProgram>
    </StartProgram>
    <CmdArgs>
    </CmdArgs>
    <DebugEngine>WindowsNative</DebugEngine>
    <MIEngineLaunchOptions>LaunchOptions.xml</MIEngineLaunchOptions>
    <RemoteDebugMachine>
    </RemoteDebugMachine>
  </PropertyGroup>
  <PropertyGroup>
    <!-- Create nesssary properies -->
    <ZigOS Condition=" '$(ApplicationType)' == 'Windows' ">windows</ZigOS>
    <ZigOS Condition=" '$(ApplicationType)' == 'linux' ">linux</ZigOS>
    <ZigOS Condition=" '$(ApplicationType)' == 'Android' ">linux</ZigOS>
    <ZigOS Condition=" '$(ApplicationType)' == 'iOS' ">ios</ZigOS>
    <ZigOS Condition=" '$(ApplicationType)' == 'Freestanding' ">freestanding-eabihf</ZigOS>
    <ZigOS Condition=" '$(OSType)' == 'macos' ">macos</ZigOS>
    <!-- Microsoft.Cpp.props does not support macos-->
    <ZigArchitecture Condition=" '$(Platform)' == 'x86' ">x86</ZigArchitecture>
    <ZigArchitecture Condition=" '$(Platform)' == 'x64' ">x86_64</ZigArchitecture>
    <ZigArchitecture Condition=" '$(Platform)' == 'ARM' ">arm</ZigArchitecture>
    <ZigArchitecture Condition=" '$(Platform)' == 'ARM64' ">aarch64</ZigArchitecture>
    <ZigOptimize Condition=" '$(Configuration)' == 'Debug' ">Debug</ZigOptimize>
    <ZigOptimize Condition=" '$(Configuration)' == 'Debug-Freestanding' ">Debug</ZigOptimize>
    <ZigOptimize Condition=" '$(Configuration)' == 'Release' ">ReleaseFast</ZigOptimize>
    <ZigOptimize Condition=" '$(Configuration)' == 'Release-Freestanding' ">ReleaseFast</ZigOptimize>
    <ZigBuildCommand Condition=" '$(ConfigurationType)' == 'Application' ">build-exe</ZigBuildCommand>
    <ZigBuildCommand Condition=" '$(ConfigurationType)' == 'StaticLibrary' ">build-lib</ZigBuildCommand>
    <ZigBuildCommand Condition=" '$(ConfigurationType)' == 'DynamicLibrary' ">build-lib</ZigBuildCommand>
    <ZigLibType Condition=" '$(ConfigurationType)' == 'Application' ">
    </ZigLibType>
    <ZigLibType Condition=" '$(ConfigurationType)' == 'StaticLibrary' ">-static</ZigLibType>
    <ZigLibType Condition=" '$(ConfigurationType)' == 'DynamicLibrary' ">-dynamic</ZigLibType>
    <OutputName Condition=" '$(ConfigurationType)' == 'Application' ">$(AssemblyName).exe</OutputName>
    <OutputName Condition=" '$(ConfigurationType)' == 'StaticLibrary' ">$(AssemblyName).lib</OutputName>
    <OutputName Condition=" '$(ConfigurationType)' == 'DynamicLibrary' ">$(AssemblyName).dll</OutputName>
    <IntDir>$(SolutionDir)..\obj\$(Platform)\$(Configuration)</IntDir>
    <OutDir>$(SolutionDir)..\bin\$(Platform)\$(Configuration)</OutDir>
    <CleaningDirectories>$(IntDir)\..;$(OutDir)\..;$(ProjectDir)zig-cache</CleaningDirectories>
  </PropertyGroup>
  <ItemGroup>
    <Compile Include="$(SolutionDir)..\bin\$(Platform)\$(Configuration)\YAGECore.lib">
      <SubType>Code</SubType>
      <Link>YAGECore.lib</Link>
    </Compile>
    <Compile Include="..\src\YAGEOS\main.zig">
      <SubType>Code</SubType>
      <Link>main.zig</Link>
    </Compile>
    <Compile Include="..\src\YAGEOS\linker.ld">
      <SubType>Code</SubType>
      <Link>linker.ld</Link>
    </Compile>
    <Compile Include="..\src\YAGEOS\mmio.zig">
      <SubType>Code</SubType>
      <Link>mmio.zig</Link>
    </Compile>
    <Compile Include="..\src\YAGEOS\renderer.zig">
      <SubType>Code</SubType>
      <Link>renderer.zig</Link>
    </Compile>
  </ItemGroup>
  <!-- Read https://learn.microsoft.com/en-us/visualstudio/extensibility/visual-cpp-project-extensibility?view=vs-2022 -->
  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.targets" />
  <Import Project="$(MSBuildBinPath)\Microsoft.Common.tasks" />
  <Target Condition="'$(GenerateBuildDotZig)' == 'true'" Name="GenerateBuildDotZig">
    <ItemGroup>
      <AllCFiles Include="@(ClCompile)" Condition="%(ClCompile.Subtype) == 'Code'" />
    </ItemGroup>
    <PropertyGroup>
      <AddIncludePath>
      </AddIncludePath>
      <AddIncludePaths Condition=" '$(IncludeDirs)' != '' ">exe.addIncludePath(.{ .path = "$(IncludeDirs.Replace('\','/').Replace(';', '"})%3B exe.addIncludePath(.{ .path = "'))"})%3B</AddIncludePaths>
      <AddLibraryPaths>
      </AddLibraryPaths>
      <AddLibraryPaths Condition=" '$(LibraryDirs)' != '' ">exe.addLibraryPath(.{ .path = "$(LibraryDirs.Replace('\','/').Replace(';', '"})%3B exe.addLibraryPath(.{ .path = "'))"})%3B</AddLibraryPaths>
      <AddLibraries>
      </AddLibraries>
      <AddLibraries Condition=" '$(Libraries)' != '' ">exe.addObjectFile(.{ .path = "$(Libraries.Replace('\','/').Replace(';', '"})%3B exe.addObjectFile(.{ .path = "'))"})%3B</AddLibraries>
      <AllCFilesFlat>@(AllCFiles)</AllCFilesFlat>
      <AddCSourceFiles>
      </AddCSourceFiles>
      <AddCSourceFiles Condition=" '$(AllCFilesFlat)' != '' ">exe.addCSourceFile(.{ .file = .{ .path = "$(AllCFilesFlat.Replace('\','/').Replace(';', '"}, .flags = &amp;.{}})%3B exe.addCSourceFile(.{ .file = .{ .path = "'))"}, .flags = &amp;.{} })%3B</AddCSourceFiles>
      <AddWin32ResourceFiles>
      </AddWin32ResourceFiles>
      <!-- Creating a Property to add ProjectReferences-->
      <NativeProjectReferencePaths>@(_ResolvedNativeProjectReferencePaths)</NativeProjectReferencePaths>
      <AddLibs Condition=" '$(NativeProjectReferencePaths)' != '' ">exe.addObjectFile(.{ .path = "$(NativeProjectReferencePaths.Replace('\','/').Replace(';', '" })%3B exe.addObjectFile(.{ .path = "'))" })%3B</AddLibs>
      <!-- Creating a function name to make main binary output -->
      <AddBinaryFunction Condition=" '$(ConfigurationType)' == 'Application' ">addExecutable</AddBinaryFunction>
      <AddBinaryFunction Condition=" '$(ConfigurationType)' == 'StaticLibrary' ">addStaticLibrary</AddBinaryFunction>
      <AddBinaryFunction Condition=" '$(ConfigurationType)' == 'DynamicLibrary' ">addSharedLibrary</AddBinaryFunction>
    </PropertyGroup>
    <WriteLinesToFile File="Build.zig" Overwrite="true" Encoding="UTF-8" Lines="&#xD;&#xA;const std = @import(&quot;std&quot;)%3B&#xD;&#xA;pub fn build(b: *std.Build) void {&#xD;&#xA;    const target = b.standardTargetOptions(.{})%3B&#xD;&#xA;    const optimize = b.standardOptimizeOption(.{})%3B&#xD;&#xA;    const exe = b.$(AddBinaryFunction)(.{&#xD;&#xA;        .name = &quot;$(Name)&quot;,&#xD;&#xA;        .root_source_file = .{ .path = &quot;$(RootSourceName)&quot; },&#xD;&#xA;        .target = target,&#xD;&#xA;        .optimize = optimize,&#xD;&#xA;    })%3B&#xD;&#xA;	$(AddIncludePaths)&#xD;&#xA;	$(AddLibraryPaths)&#xD;&#xA;	$(AddCSourceFiles)&#xD;&#xA;	$(AddWin32ResourceFiles)&#xD;&#xA;	$(AddLibraries)&#xD;&#xA;	$(AddLibs)&#xD;&#xA;    b.installArtifact(exe)%3B&#xD;&#xA;    const run_cmd = b.addRunArtifact(exe)%3B&#xD;&#xA;    run_cmd.step.dependOn(b.getInstallStep())%3B&#xD;&#xA;    if (b.args) |args| {&#xD;&#xA;        run_cmd.addArgs(args)%3B&#xD;&#xA;    }&#xD;&#xA;    const run_step = b.step(&quot;run&quot;, &quot;Run the app&quot;)%3B&#xD;&#xA;    run_step.dependOn(&amp;run_cmd.step)%3B&#xD;&#xA;}&#xD;&#xA;" />
  </Target>
  <Target Condition="'$(GenerateBuildDotZigDotZon)' == 'true'" Name="GenerateBuildDotZigDotZon">
    <WriteLinesToFile File="Build.zig.zon" Overwrite="true" Encoding="UTF-8" Lines="&#xD;&#xA;.{&#xD;&#xA;    .name = &quot;$(AssemblyName)&quot;,&#xD;&#xA;    .version = &quot;$(AssemblyVersion)&quot;,&#xD;&#xA;    .dependencies = .{&#xD;&#xA;    },&#xD;&#xA;    .paths = .{&#xD;&#xA;        &quot;&quot;,&#xD;&#xA;    },&#xD;&#xA;}&#xD;&#xA;" />
  </Target>
  <Target Name="BuildWithOutBuildDotZig" Condition="'$(UseBuildDotZig)' == 'false'">
    <ItemGroup>
      <AllCFiles Include="@(ClCompile)" Condition="%(ClCompile.Subtype) == 'Code'" />
    </ItemGroup>
    <PropertyGroup>
      <IncludeDirsOption>
      </IncludeDirsOption>
      <IncludeDirsOption Condition=" '$(IncludeDirs)' != '' "> -I $(IncludeDirs.Replace(';', ' -I ')) </IncludeDirsOption>
      <LibraryDirsOption>
      </LibraryDirsOption>
      <LibraryDirsOption Condition=" '$(LibraryDirs)' != '' "> -L $(LibraryDirs.Replace(';', ' -L ')) </LibraryDirsOption>
      <LibrariesOption>
      </LibrariesOption>
      <LibrariesOption Condition=" '$(Libraries)' != '' ">-l $(Libraries.Replace(';', ' -l ')) </LibrariesOption>
      <DependenciesOption>
      </DependenciesOption>
      <DependenciesOption Condition=" '$(Dependencies)' != '' ">--deps $(Dependencies.Replace(';', ' --deps ')) </DependenciesOption>
      <ModulesOption>
      </ModulesOption>
      <ModulesOption Condition=" '$(Modules)' != '' ">--mod $(Modules.Replace(';', ' --mod ')) </ModulesOption>
      <NativeProjectReferencePaths>@(_ResolvedNativeProjectReferencePaths)</NativeProjectReferencePaths>
      <AllCFilesFlat>@(AllCFiles)</AllCFilesFlat>
      <BuildCommand>"$(ZIG_TOOL_PATH)$(ToolName)" $(ZigBuildCommand) --name $(AssemblyName) -target $(ZigArchitecture)-$(ZigOS) -Doptimize=$(ZigOptimize) -femit-bin=$(OutDir)$(OutputName) --cache-dir $(IntDir) $(ZigLibType) $(IncludeDirsOption) $(LibraryDirsOption) $(LibrariesOption) $(DependenciesOption) $(ModulesOption) $(BuildOption) $(RootSourceName) $(AllCFilesFlat.Replace(';', ' ')) $(NativeProjectReferencePaths.Replace(';', ' ')) $(AllRCFilesFlat.Replace(';', ' '))</BuildCommand>
    </PropertyGroup>
    <MakeDir Directories="$(OutDir)" />
    <Message Text="Building: $(BuildCommand)" Importance="high" />
    <Exec WorkingDirectory="$(ProjectDir)" Command="$(BuildCommand)" />
  </Target>
  <Target Name="BuildWithBuildDotZig" Condition="'$(UseBuildDotZig)' == 'true'">
    <PropertyGroup>
      <OutputTypeName Condition=" '$(ConfigurationType)' == 'Application' ">exe</OutputTypeName>
      <OutputTypeName Condition=" '$(ConfigurationType)' != 'Application' ">lib</OutputTypeName>
      <BuildCommand>"$(ZIG_TOOL_PATH)$(ToolName)" build -Dtarget=$(ZigArchitecture)-$(ZigOS) -Doptimize=$(ZigOptimize) --cache-dir $(IntDir) --prefix-$(OutputTypeName)-dir $(OutDir)</BuildCommand>
    </PropertyGroup>
    <Message Text="Building: $(BuildCommand)" Importance="high" />
    <Exec WorkingDirectory="$(ProjectDir)" Command="$(BuildCommand)" />
  </Target>
  <Target Name="Clean">
    <Message Text="Cleaning:$(CleaningDirectories)" Importance="high" />
    <RemoveDir Directories="$(CleaningDirectories)" />
  </Target>
  <Target Name="Build" DependsOnTargets="GetResourceCompile;ResolveProjectReferences;GenerateBuildDotZigDotZon;GenerateBuildDotZig;BuildWithOutBuildDotZig;BuildWithBuildDotZig">
  </Target>
  <Target Name="ReBuild" DependsOnTargets="Clean;Build">
  </Target>
  <Target Name="AllProjectOutputGroups" />
  <!--<Target Name="BuildWithOutBuildDotZig" Condition="'$(UseBuildDotZig)' == 'false'" Inputs="@(Compile);@(ClCompile);@(Content)" Outputs="$(OutDir)$(OutputName)" />-->
  <!-- clear target defined in Microsoft.CppBuild.targets to avoid OutputGroup.cs DebugAssert()-->
</Project>