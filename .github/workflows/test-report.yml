name: Test Report

on: 
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

env:
  SOLUTION_FILE_PATH: .\build\visualstudio\Tests.sln
  BUILD_CONFIGURATION: Tests
  TEST_REPO_URL: https://github.com/Gekkio/mooneye-test-suite.git
  TEST_REPO_DIR: mooneye-test-suite
  TEST_REPORT_ISSUE_NUMBER: 31  # You can change this to any existing issue number

permissions:
  contents: write
  actions: read
  checks: read
  issues: write

jobs:
  run-tests:
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: false
          fetch-depth: 0
        
      - name: Clone test repository
        run: |
          git clone ${{ env.TEST_REPO_URL }} ${{ env.TEST_REPO_DIR }}
        
      - name: Add MSBuild to PATH
        uses: microsoft/setup-msbuild@v1.0.2

      - name: Restore NuGet packages
        working-directory: ${{ env.GITHUB_WORKSPACE }}
        run: nuget restore ${{ env.SOLUTION_FILE_PATH }}
        
      - name: Build
        id: build
        working-directory: ${{ env.GITHUB_WORKSPACE }}
        run: |
          msbuild /m /p:Configuration=${{ env.BUILD_CONFIGURATION }} `
                  ${{ env.SOLUTION_FILE_PATH }}
      
      - name: Run tests
        id: run-tests
        working-directory: ${{ env.GITHUB_WORKSPACE }}
        run: |
          # Compute absolute path for AccuracyTests.exe
          $testExe = "$env:GITHUB_WORKSPACE\bin\x64\TestOnly\AccuracyTests.exe"
          # Use absolute path for the test directory as well
          $testDir = "$env:GITHUB_WORKSPACE\${{ env.TEST_REPO_DIR }}\acceptance"
          $outputFile = "test_results.txt"
          Write-Output "Absolute path of acceptance directory: $testDir"
          
          # Run tests with external test directory
          & $testExe -externalTestDir $testDir > $outputFile 2>&1
          $testExitCode = $LASTEXITCODE
          
          # Parse test results
          $testResults = Get-Content $outputFile
          $passedTests = @()
          $failedTests = @()
          
          foreach ($line in $testResults) {
            if ($line -match "\[  PASSED  \] (\d+) test") {
              $passedCount = $matches[1]
            }
            elseif ($line -match "\[  FAILED  \] (\d+) test") {
              $failedCount = $matches[1]
            }
            elseif ($line -match "FAIL\((\d+)\): ExternalTestFixture\.Main") {
              $failedTestName = $line -replace ".*FAIL\(\d+\): ExternalTestFixture\.Main", ""
              $failedTests += $failedTestName.Trim()
            }
          }
          
          # Create a summary file
          $summaryFile = "test_summary.md"
          "## Test Summary" | Out-File $summaryFile
          "Total tests: $($passedCount + $failedCount)" | Out-File $summaryFile -Append
          "Passed: $passedCount" | Out-File $summaryFile -Append
          "Failed: $failedCount" | Out-File $summaryFile -Append
          
          if ($failedTests.Count -gt 0) {
            "" | Out-File $summaryFile -Append
            "### Failed Tests" | Out-File $summaryFile -Append
            foreach ($test in $failedTests) {
              "- $test" | Out-File $summaryFile -Append
            }
          }
          
          # Set output variables for the next step
          echo "passed_count=$passedCount" >> $env:GITHUB_OUTPUT
          echo "failed_count=$failedCount" >> $env:GITHUB_OUTPUT
          
          # Return the original exit code
          exit $testExitCode
      
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            test_results.txt
            test_summary.md
          retention-days: 30
      
      - name: Update test report issue
        if: always() && github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const summaryPath = 'test_summary.md';
            let summaryContent = '## Test Summary\n';
            
            if (fs.existsSync(summaryPath)) {
              summaryContent = fs.readFileSync(summaryPath, 'utf8');
            } else {
              summaryContent += 'Test results not available.';
            }
            
            const issueTitle = `Test Report - ${new Date().toISOString().split('T')[0]}`;
            const issueBody = `${summaryContent}\n\nCommit: ${context.sha}\nRun: ${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`;
            
            try {
              // Try to update the existing issue
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: process.env.TEST_REPORT_ISSUE_NUMBER,
                title: issueTitle,
                body: issueBody,
                labels: ['test-report']
              });
            } catch (error) {
              // If the issue doesn't exist, create it
              if (error.status === 404) {
                await github.rest.issues.create({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  title: issueTitle,
                  body: issueBody,
                  labels: ['test-report']
                });
              } else {
                // Re-throw other errors
                throw error;
              }
            }
