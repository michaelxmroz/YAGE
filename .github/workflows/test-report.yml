name: Test Report

on: 
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

env:
  SOLUTION_FILE_PATH: .\build\visualstudio\Tests.sln
  BUILD_CONFIGURATION: Tests
  # URL to the built test ROMs zip file
  TEST_ROM_ZIP_URL: https://gekkio.fi/files/mooneye-test-suite/mts-20240926-1737-443f6e1/mts-20240926-1737-443f6e1.zip
  # Name for the downloaded zip file
  TEST_ROM_ZIP: mooneye.zip
  # Expected extracted folder name (as contained within the zip)
  TEST_ROM_DIR: mts-20240926-1737-443f6e1
  TEST_REPORT_ISSUE_NUMBER: 31  # You can change this to any existing issue number

permissions:
  contents: write
  actions: read
  checks: read
  issues: write

jobs:
  run-tests:
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: false
          fetch-depth: 0

      - name: Download built test ROMs
        run: |
          Write-Output "Downloading built test ROMs from $env:TEST_ROM_ZIP_URL"
          Invoke-WebRequest -Uri $env:TEST_ROM_ZIP_URL -OutFile "$env:GITHUB_WORKSPACE\$env:TEST_ROM_ZIP"
      
      - name: Extract built test ROMs
        run: |
          $zipPath = "$env:GITHUB_WORKSPACE\$env:TEST_ROM_ZIP"
          $destination = "$env:GITHUB_WORKSPACE"
          Write-Output "Extracting $zipPath to $destination"
          Expand-Archive -Path $zipPath -DestinationPath $destination -Force

      - name: Add MSBuild to PATH
        uses: microsoft/setup-msbuild@v1.0.2

      - name: Restore NuGet packages
        working-directory: ${{ env.GITHUB_WORKSPACE }}
        run: nuget restore ${{ env.SOLUTION_FILE_PATH }}

      - name: Build
        id: build
        working-directory: ${{ env.GITHUB_WORKSPACE }}
        run: |
          msbuild /m /p:Configuration=${{ env.BUILD_CONFIGURATION }} `
                  ${{ env.SOLUTION_FILE_PATH }}

      - name: Run tests
        id: run-tests
        working-directory: ${{ env.GITHUB_WORKSPACE }}
        run: |
          # Compute absolute path for AccuracyTests.exe
          $testExe = "$env:GITHUB_WORKSPACE\bin\x64\TestOnly\AccuracyTests.exe"
          # Compute absolute path for the acceptance directory within the extracted ROMs
          $testDir = "$env:GITHUB_WORKSPACE\$env:TEST_ROM_DIR\acceptance"
          Write-Output "Absolute path of acceptance directory: $testDir"
          
          $outputFile = "test_results.txt"
          
          # Run tests with external test directory
          & $testExe -externalTestDir $testDir > $outputFile 2>&1
          $testExitCode = $LASTEXITCODE
          
          # Simplify parsing: copy recap portion after the last occurrence of "[==========]"
          $content = Get-Content $outputFile
          $indexes = @()
          for ($i = 0; $i -lt $content.Count; $i++) {
              if ($content[$i] -match "\[==========\]") {
                  $indexes += $i
              }
          }
          if ($indexes.Count -gt 0) {
              $startIndex = $indexes[-1] + 1
          } else {
              $startIndex = 0
          }
          $summaryContent = $content[$startIndex..($content.Count - 1)] -join "`n"
          $summaryFile = "test_summary.md"
          $summaryContent | Out-File $summaryFile
          
          # Output the test summary for debugging
          Write-Output "Test summary:"
          Get-Content $summaryFile
          
          echo "exit_code=$testExitCode" >> $env:GITHUB_OUTPUT
          exit $testExitCode

      # Checkout the test-history branch into a subdirectory (if it exists)
      - name: Checkout test history branch
        uses: actions/checkout@v4
        with:
          ref: test-history
          path: test-history
        continue-on-error: true

      - name: Compare test summary with previous run
        shell: pwsh
        run: |
          if (Test-Path "test_summary.md") {
              $currentSummary = Get-Content "test_summary.md" -Raw
              $currentFirstLine = $currentSummary.Split("`n")[0].Trim()
              Write-Output "Current summary first line: $currentFirstLine"
              
              if ($currentFirstLine -match "\[ *PASSED *\] +(\d+) test") {
                  $currentPassed = [int]$matches[1]
                  Write-Output "Current passed tests: $currentPassed"
              } else {
                  Write-Error "Current summary does not have the expected format."
                  exit 1
              }
          } else {
              Write-Error "Current test summary file not found."
              exit 1
          }
          
          if (Test-Path "test-history/latest_test_summary.md") {
              $prevSummary = Get-Content "test-history/latest_test_summary.md" -Raw
              $prevFirstLine = $prevSummary.Split("`n")[0].Trim()
              Write-Output "Previous summary first line: $prevFirstLine"
              
              if ($prevFirstLine -match "\[ *PASSED *\] +(\d+) test") {
                  $prevPassed = [int]$matches[1]
                  Write-Output "Previous passed tests: $prevPassed"
              } else {
                  Write-Error "Previous summary does not have the expected format."
                  exit 1
              }
              
              if ($currentPassed -lt $prevPassed) {
                  Write-Error "Test regressions detected: current passed tests ($currentPassed) is lower than previous ($prevPassed)."
                  exit 1
              } else {
                  Write-Output "No regressions: current passed tests ($currentPassed) vs previous ($prevPassed)."
              }
          } else {
              Write-Output "No previous test summary found, skipping comparison."
          }

      - name: Update test history branch
        if: success()
        shell: pwsh
        run: |
          # Update the test history file with the current summary
          Copy-Item test_summary.md test-history/latest_test_summary.md -Force
          cd test-history
          git config user.name "github-actions"
          git config user.email "actions@github.com"
          git add latest_test_summary.md
          $commitMsg = "Update test summary for run $(Get-Date -Format 'yyyy-MM-ddTHH:mm:ssZ')"
          git commit -m $commitMsg || Write-Output "No changes to commit."
          git push origin test-history

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            test_results.txt
            test_summary.md
          retention-days: 30

      - name: Update test report issue
        if: always() && github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const summaryPath = 'test_summary.md';
            let summaryContent = '## Test Summary\n';
            
            if (fs.existsSync(summaryPath)) {
              summaryContent = fs.readFileSync(summaryPath, 'utf8');
            } else {
              summaryContent += 'Test results not available.';
            }
            
            const issueTitle = `Test Report - ${new Date().toISOString().split('T')[0]}`;
            const issueBody = `${summaryContent}\n\nCommit: ${context.sha}\nRun: ${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`;
            
            try {
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: process.env.TEST_REPORT_ISSUE_NUMBER,
                title: issueTitle,
                body: issueBody,
                labels: ['test-report']
              });
            } catch (error) {
              if (error.status === 404) {
                await github.rest.issues.create({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  title: issueTitle,
                  body: issueBody,
                  labels: ['test-report']
                });
              } else {
                throw error;
              }
            }
