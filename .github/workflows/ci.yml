name: Build Windows

on: 
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  SOLUTION_FILE_PATH: .\build\visualstudio\YAGE.sln
  BUILD_CONFIGURATION: Release
  VCPKG_INSTALLED_DIR: .\build\visualstudio\vcpkg_installed
  VCPKG_DEFAULT_TRIPLET: x64-windows-static

permissions:
  contents: read
  actions: read
  checks: read

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: true
          fetch-depth: 0
        
      - name: Add MSBuild to PATH
        uses: microsoft/setup-msbuild@v1.0.2

      - name: Setup vcpkg
        uses: lukka/run-vcpkg@v11
        id: runvcpkg
        with:
          vcpkgDirectory: './build/visualstudio/vcpkg'
          vcpkgGitCommitId: 'b02e341c927f16d991edbd915d8ea43eac52096c'
          # Run vcpkg with the command specified by the `runVcpkgFormatString` input.
          runVcpkgInstall: true
          vcpkgJsonGlob: './build/visualstudio/vcpkg.json'

      - name: Prints output of run-vcpkg's action.
        run: echo "root='${{ steps.runvcpkg.outputs.RUNVCPKG_VCPKG_ROOT_OUT }}', triplet='${{ steps.runvcpkg.outputs.RUNVCPKG_VCPKG_DEFAULT_TRIPLET_OUT }}' "
  
      - name: Integrate vcpkg with MSBuild
        run: |
          ./build/visualstudio/vcpkg/vcpkg integrate install

      - name: Restore NuGet packages
        working-directory: ${{env.GITHUB_WORKSPACE}}
        run: nuget restore ${{env.SOLUTION_FILE_PATH}}
        
      - name: Build
        id: build
        continue-on-error: true
        working-directory: ${{env.GITHUB_WORKSPACE}}
        run: |
          msbuild /m /p:Configuration=${{env.BUILD_CONFIGURATION}} `
                  /p:VcpkgRoot=${{ steps.runvcpkg.outputs.RUNVCPKG_VCPKG_ROOT_OUT }} `
                  /p:VcpkgInstalledDir=${{env.VCPKG_INSTALLED_DIR}} `
                  /p:VcpkgTriplet=${{ steps.runvcpkg.outputs.RUNVCPKG_VCPKG_DEFAULT_TRIPLET_OUT }} `
                  ${{env.SOLUTION_FILE_PATH}}
      
      - name: Create Windows artifact directory
        if: steps.build.outcome == 'success'
        run: |
          mkdir -p artifacts/windows
          cp bin/x64/Release/*.exe artifacts/windows/
          cp bin/x64/Release/*.glsl artifacts/windows/
      
      - name: Upload Windows Build Artifacts
        if: steps.build.outcome == 'success'
        uses: actions/upload-artifact@v4
        with:
          name: yage-windows
          path: artifacts/windows/
          retention-days: 7
          
      - name: Generate Windows Build Badge - Success
        if: steps.build.outcome == 'success'
        uses: peterrhodesdev/build-a-badge@v1.3.1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          filename: windows-build
          label: Windows
          message: passing
          color: green
          
      - name: Generate Windows Build Badge - Failure
        if: steps.build.outcome == 'failure'
        uses: peterrhodesdev/build-a-badge@v1.3.1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          filename: windows-build
          label: Windows
          message: failing
          color: red
